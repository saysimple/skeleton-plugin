"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const querystring_1 = __importDefault(require("querystring"));
const path_1 = __importDefault(require("path"));
const shared_1 = require("@intlify/shared");
const pluginutils_1 = require("@rollup/pluginutils");
const bundle_utils_1 = require("@intlify/bundle-utils");
const debug_1 = require("debug");
const debug = debug_1.debug('rollup-plugin-vue-i18n');
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function i18n(options = { forceStringify: false }) {
    debug('options', options);
    const filter = pluginutils_1.createFilter(options.include);
    return {
        name: 'rollup-plugin-vue-i18n',
        transform(source, id) {
            debug('transform source', source);
            debug('transform id', id);
            const query = parseVuePartRequest(id);
            debug('transform query', query);
            const { filename } = query;
            debug('condition', /\.(json5?|ya?ml)$/.test(filename) && filter(filename));
            if (isCustomBlock(query) ||
                (/\.(json5?|ya?ml)$/.test(filename) && filter(filename))) {
                const parseOptions = getOptions(query, options.forceStringify);
                debug('getOptions', parseOptions);
                const langInfo = isCustomBlock(query)
                    ? shared_1.isString(query.lang) && query.lang !== 'i18n'
                        ? query.lang
                        : 'json'
                    : path_1.default.parse(filename).ext;
                debug('langInfo', langInfo);
                const generate = /json5?/.test(langInfo) ? bundle_utils_1.generateJSON : bundle_utils_1.generateYAML;
                const { code } = generate(source, parseOptions);
                debug('code', code);
                // TODO: source-map
                return {
                    code,
                    map: {
                        mappings: ''
                    }
                };
            }
            else {
                return null;
            }
        }
    };
}
exports.default = i18n;
function isCustomBlock(query) {
    // NOTE: set query type 'i18n' with rollup-plugin-vue
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return query.vue && query['type'] === 'i18n';
}
function getOptions(query, forceStringify = false) {
    const { filename } = query;
    const mode = process.env.NODE_ENV === 'production' || process.env.BUILD === 'production'
        ? 'production'
        : 'development';
    const baseOptions = {
        filename,
        forceStringify,
        env: mode,
        onWarn: (msg) => {
            console.warn(`[rollup-plugin-vue-i18n]: ${filename} ${msg}`);
        },
        onError: (msg) => {
            console.error(`[rollup-plugin-vue-i18n]: ${filename} ${msg}`);
        }
    };
    if (isCustomBlock(query)) {
        return Object.assign(baseOptions, {
            type: 'sfc',
            locale: shared_1.isString(query.locale) ? query.locale : '',
            isGlobal: query.global != null
        });
    }
    else {
        return Object.assign(baseOptions, {
            type: 'plain',
            isGlobal: false
        });
    }
}
function parseVuePartRequest(id) {
    const [filename, query] = id.split('?', 2);
    if (!query) {
        return { vue: false, filename };
    }
    const raw = querystring_1.default.parse(query);
    if ('vue' in raw) {
        const langPart = Object.keys(raw).find(key => /lang\./i.test(key));
        const part = {
            ...raw,
            filename,
            vue: true,
            index: Number(raw.index),
            src: 'src' in raw,
            scoped: 'scoped' in raw
        };
        if (langPart) {
            const [, lang] = langPart.split('.');
            part.lang = lang;
        }
        return part;
    }
    return { vue: false, filename };
}
